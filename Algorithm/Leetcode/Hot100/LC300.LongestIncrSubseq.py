from typing import List

"""
给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。
子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。
解题思路：记忆化搜索
1. 我们创建一个 DP 数组，表示以该数字为「结尾」的时候，最长的递增数组长度。其中初始化全部设置为 [1]，表示就只有该数字的时候，递增数组长度为 1；
2. 我们从头开始遍历数组，当前数字下标为 i；我们再从 i 出发，依次往前寻找下标为 j 的数字：
    * 如果数字 j 小于数字 i，即 nums[j] < nums[i]，说明当前数字 i 是可以成为 j 数字的下一个递增对象，那么此时「经过 j 的最长递增数组」长度就是 dp[j] + 1；
    * 我们还要做一个比较，因为不一定只有一个数字 j 会小于数字 i，那么 dp[i] 这里填入的数字应该就是 max(dp[i], dp[j] + 1)。
3. 其实 dp 数组中的数字本身包含了记忆化搜索的含义，尽管没有把此时递增序列列举出来，但是我们可以记住一个递增数组到当前数字的时候，「历史上最长」是多少，如果发现一个数字比它大，那么这个数字可以成为当前长度的下一个。
"""


class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        n: int = len(nums)
        dp: List[int] = [1] * n
        for i in range(1, n):
            for j in range(i - 1, -1, -1):
                if nums[j] < nums[i]:
                    dp[i] = max(dp[i], dp[j] + 1)
        return max(dp)


if __name__ == '__main__':
    s = Solution()
    s.lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18])
