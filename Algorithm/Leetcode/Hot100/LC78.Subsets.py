from typing import List

"""
给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。
解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。
解题思路：数学+集合论
1. 如果原来的集合中什么都没有，我们可以得到子集只包含空集∅。假设我们此时集合中有一个[1]，我们可以获得所有的子集是[[], [1]]。我们基于这两者可以接下去的数学归纳「迭代」。
2. 如果集合中是[1, 2]，我们可以轻易得到所有的子集是[[], [1], [2], [1, 2]]。我们思考一下：
    * 相比于集合中只有1，当集合中多了一个2的时候，这「多出来」的子集[[2], [1, 2]]是怎么得到的。我们运用数学方法思考一下：
    * [2] = []（即原来集合中的[]）∪ [2]
    * [1, 2] = [1]（即原来集合中的[1]）∪ [2]
3. 因此我们在遍历nums中的元素的时候，将其与之前ans所有的结果做一个∪即可。
"""


class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        # 初始化结果，包含一个空集
        ans = [[]]

        for n in nums:
            # 遍历当前已有的所有子集，并为每个子集添加新的元素 n
            # 创建 [subset + [n] for subset in ans]
            # 然后加到 ans 中
            for subset in ans[:]:
                ans += [subset + [n]]

        return ans


if __name__ == '__main__':
    s = Solution()
    print(s.subsets([1, 2, 3]))
